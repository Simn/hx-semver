package semver;

import massive.munit.Assert;
using semver.SemVer;

/**
@author david.peek
*/
class SemVerTest
{
	public function new() {}

	//-------------------------------------------------------------------------- suites

	static var equalities:Array<Dynamic> = 
	[ ["0.0.0", "0.0.0foo"]
	, ["0.0.1", "0.0.0"]
	, ["1.0.0", "0.9.9"]
	, ["0.10.0", "0.9.0"]
	, ["0.99.0", "0.10.0"]
	, ["2.0.0", "1.2.3"]
	, ["v0.0.0", "0.0.0foo"]
	, ["v0.0.1", "0.0.0"]
	, ["v1.0.0", "0.9.9"]
	, ["v0.10.0", "0.9.0"]
	, ["v0.99.0", "0.10.0"]
	, ["v2.0.0", "1.2.3"]
	, ["0.0.0", "v0.0.0foo"]
	, ["0.0.1", "v0.0.0"]
	, ["1.0.0", "v0.9.9"]
	, ["0.10.0", "v0.9.0"]
	, ["0.99.0", "v0.10.0"]
	, ["2.0.0", "v1.2.3"]
	, ["1.2.3", "1.2.3-asdf"]
	, ["1.2.3-4", "1.2.3"]
	, ["1.2.3-4-foo", "1.2.3"]
	, ["1.2.3-5", "1.2.3-5-foo"]
	, ["1.2.3-5", "1.2.3-4"]
	, ["1.2.3-5-foo", "1.2.3-5-Foo"]
	, ["3.0.0", "2.7.2+"]];

	static var nequalities:Array<Dynamic> =
	[ ["1.2.3", "v1.2.3"]
	, ["1.2.3", "=1.2.3"]
	, ["1.2.3", "v 1.2.3"]
	, ["1.2.3", "= 1.2.3"]
	, ["1.2.3", " v1.2.3"]
	, ["1.2.3", " =1.2.3"]
	, ["1.2.3", " v 1.2.3"]
	, ["1.2.3", " = 1.2.3"]
	, ["1.2.3-0", "v1.2.3-0"]
	, ["1.2.3-0", "=1.2.3-0"]
	, ["1.2.3-0", "v 1.2.3-0"]
	, ["1.2.3-0", "= 1.2.3-0"]
	, ["1.2.3-0", " v1.2.3-0"]
	, ["1.2.3-0", " =1.2.3-0"]
	, ["1.2.3-0", " v 1.2.3-0"]
	, ["1.2.3-0", " = 1.2.3-0"]
	, ["1.2.3-01", "v1.2.3-1"]
	, ["1.2.3-01", "=1.2.3-1"]
	, ["1.2.3-01", "v 1.2.3-1"]
	, ["1.2.3-01", "= 1.2.3-1"]
	, ["1.2.3-01", " v1.2.3-1"]
	, ["1.2.3-01", " =1.2.3-1"]
	, ["1.2.3-01", " v 1.2.3-1"]
	, ["1.2.3-01", " = 1.2.3-1"]
	, ["1.2.3beta", "v1.2.3beta"]
	, ["1.2.3beta", "=1.2.3beta"]
	, ["1.2.3beta", "v 1.2.3beta"]
	, ["1.2.3beta", "= 1.2.3beta"]
	, ["1.2.3beta", " v1.2.3beta"]
	, ["1.2.3beta", " =1.2.3beta"]
	, ["1.2.3beta", " v 1.2.3beta"]
	, ["1.2.3beta", " = 1.2.3beta"]];

	static var ranges:Array<Dynamic> =
	[ ["1.0.0 - 2.0.0", "1.2.3"]
	, ["1.0.0", "1.0.0"]
	, [">=*", "0.2.4"]
	, ["", "1.0.0"]
	, ["*", "1.2.3"]
	, ["*", "v1.2.3-foo"]
	, [">=1.0.0", "1.0.0"]
	, [">=1.0.0", "1.0.1"]
	, [">=1.0.0", "1.1.0"]
	, [">1.0.0", "1.0.1"]
	, [">1.0.0", "1.1.0"]
	, ["<=2.0.0", "2.0.0"]
	, ["<=2.0.0", "1.9999.9999"]
	, ["<=2.0.0", "0.2.9"]
	, ["<2.0.0", "1.9999.9999"]
	, ["<2.0.0", "0.2.9"]
	, [">= 1.0.0", "1.0.0"]
	, [">=  1.0.0", "1.0.1"]
	, [">=   1.0.0", "1.1.0"]
	, ["> 1.0.0", "1.0.1"]
	, [">  1.0.0", "1.1.0"]
	, ["<=   2.0.0", "2.0.0"]
	, ["<= 2.0.0", "1.9999.9999"]
	, ["<=  2.0.0", "0.2.9"]
	, ["<    2.0.0", "1.9999.9999"]
	, ["<\t2.0.0", "0.2.9"]
	, [">=0.1.97", "v0.1.97"]
	, [">=0.1.97", "0.1.97"]
	, ["0.1.20 || 1.2.4", "1.2.4"]
	, [">=0.2.3 || <0.0.1", "0.0.0"]
	, [">=0.2.3 || <0.0.1", "0.2.3"]
	, [">=0.2.3 || <0.0.1", "0.2.4"]
	, ["||", "1.3.4"]
	, ["2.x.x", "2.1.3"]
	, ["1.2.x", "1.2.3"]
	, ["1.2.x || 2.x", "2.1.3"]
	, ["1.2.x || 2.x", "1.2.3"]
	, ["x", "1.2.3"]
	, ["2.*.*", "2.1.3"]
	, ["1.2.*", "1.2.3"]
	, ["1.2.* || 2.*", "2.1.3"]
	, ["1.2.* || 2.*", "1.2.3"]
	, ["*", "1.2.3"]
	, ["2", "2.1.2"]
	, ["2.3", "2.3.1"]
	, ["~2.4", "2.4.0"] // >=2.4.0 <2.5.0
	, ["~2.4", "2.4.5"]
	, ["~>3.2.1", "3.2.2"] // >=3.2.1 <3.3.0
	, ["~1", "1.2.3"] // >=1.0.0 <2.0.0
	, ["~>1", "1.2.3"]
	, ["~> 1", "1.2.3"]
	, ["~1.0", "1.0.2"] // >=1.0.0 <1.1.0
	, ["~ 1.0", "1.0.2"]
	, [">=1", "1.0.0"]
	, [">= 1", "1.0.0"]
	, ["<1.2", "1.1.1"]
	, ["< 1.2", "1.1.1"]
	, ["1", "1.0.0beta"]
	, ["~v0.5.4-pre", "0.5.5"]
	, ["~v0.5.4-pre", "0.5.4"]
	, ["=0.7.x", "0.7.2"]
	, [">=0.7.x", "0.7.2"]
	, ["=0.7.x", "0.7.0-asdf"]
	, [">=0.7.x", "0.7.0-asdf"]
	, ["<=0.7.x", "0.6.2"]];

	static var nranges:Array<Dynamic> =
	[ ["1.0.0 - 2.0.0", "2.2.3"]
	, ["1.0.0", "1.0.1"]
	, [">=1.0.0", "0.0.0"]
	, [">=1.0.0", "0.0.1"]
	, [">=1.0.0", "0.1.0"]
	, [">1.0.0", "0.0.1"]
	, [">1.0.0", "0.1.0"]
	, ["<=2.0.0", "3.0.0"]
	, ["<=2.0.0", "2.9999.9999"]
	, ["<=2.0.0", "2.2.9"]
	, ["<2.0.0", "2.9999.9999"]
	, ["<2.0.0", "2.2.9"]
	, [">=0.1.97", "v0.1.93"]
	, [">=0.1.97", "0.1.93"]
	, ["0.1.20 || 1.2.4", "1.2.3"]
	, [">=0.2.3 || <0.0.1", "0.0.3"]
	, [">=0.2.3 || <0.0.1", "0.2.2"]
	, ["2.x.x", "1.1.3"]
	, ["2.x.x", "3.1.3"]
	, ["1.2.x", "1.3.3"]
	, ["1.2.x || 2.x", "3.1.3"]
	, ["1.2.x || 2.x", "1.1.3"]
	, ["2.*.*", "1.1.3"]
	, ["2.*.*", "3.1.3"]
	, ["1.2.*", "1.3.3"]
	, ["1.2.* || 2.*", "3.1.3"]
	, ["1.2.* || 2.*", "1.1.3"]
	, ["2", "1.1.2"]
	, ["2.3", "2.4.1"]
	, ["~2.4", "2.5.0"] // >=2.4.0 <2.5.0
	, ["~2.4", "2.3.9"]
	, ["~>3.2.1", "3.3.2"] // >=3.2.1 <3.3.0
	, ["~>3.2.1", "3.2.0"] // >=3.2.1 <3.3.0
	, ["~1", "0.2.3"] // >=1.0.0 <2.0.0
	, ["~>1", "2.2.3"]
	, ["~1.0", "1.1.0"] // >=1.0.0 <1.1.0
	, ["<1", "1.0.0"]
	, [">=1.2", "1.1.1"]
	, ["1", "2.0.0beta"]
	, ["~v0.5.4-beta", "0.5.4-alpha"]
	, ["<1", "1.0.0beta"]
	, ["< 1", "1.0.0beta"]
	, ["=0.7.x", "0.8.2"]
	, [">=0.7.x", "0.6.2"]
	, ["<=0.7.x", "0.7.2"]];

	static var increments:Array<Dynamic> =
	[ [ "1.2.3",		Major, "2.0.0"   ]
	, [ "1.2.3",		Minor, "1.3.0"   ]
	, [ "1.2.3",		Patch, "1.2.4"   ]
	, [ "1.2.3",		Build, "1.2.3-1" ]
	, [ "1.2.3-4",		Build, "1.2.3-5" ]
	, [ "1.2.3tag",		Major, "2.0.0"   ]
	, [ "1.2.3-tag",	Major, "2.0.0"   ]
	, [ "1.2.3tag",		Build, "1.2.3-1" ]
	, [ "1.2.3-tag",	Build, "1.2.3-1" ]
	, [ "1.2.3-4-tag",	Build, "1.2.3-5" ]
	, [ "1.2.3-4tag",	Build, "1.2.3-5" ]
	, [ "fake",			Major, null ]];

	static var stars:Array<Dynamic> =
	[ [ "", "" ]
	, [ "*", "" ]
	, [ "> *", "" ]
	, [ "<*", "" ]
	, [ " >=  *", "" ]
	, [ "* || 1.2.3", " || 1.2.3" ]];

	static var validRanges:Array<Dynamic> =
	[ ["1.0.0 - 2.0.0", ">=1.0.0 <=2.0.0"]
	, ["1.0.0", "1.0.0"]
	, [">=*", ""]
	, ["", ""]
	, ["*", ""]
	, ["*", ""]
	, [">=1.0.0", ">=1.0.0"]
	, [">1.0.0", ">1.0.0"]
	, ["<=2.0.0", "<=2.0.0"]
	, ["1", ">=1.0.0- <2.0.0-"]
	, ["<=2.0.0", "<=2.0.0"]
	, ["<=2.0.0", "<=2.0.0"]
	, ["<2.0.0", "<2.0.0"]
	, ["<2.0.0", "<2.0.0"]
	, [">= 1.0.0", ">=1.0.0"]
	, [">=  1.0.0", ">=1.0.0"]
	, [">=   1.0.0", ">=1.0.0"]
	, ["> 1.0.0", ">1.0.0"]
	, [">  1.0.0", ">1.0.0"]
	, ["<=   2.0.0", "<=2.0.0"]
	, ["<= 2.0.0", "<=2.0.0"]
	, ["<=  2.0.0", "<=2.0.0"]
	, ["<    2.0.0", "<2.0.0"]
	, ["<	2.0.0", "<2.0.0"]
	, [">=0.1.97", ">=0.1.97"]
	, [">=0.1.97", ">=0.1.97"]
	, ["0.1.20 || 1.2.4", "0.1.20||1.2.4"]
	, [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"]
	, [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"]
	, [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"]
	, ["||", "||"]
	, ["2.x.x", ">=2.0.0- <3.0.0-"]
	, ["1.2.x", ">=1.2.0- <1.3.0-"]
	, ["1.2.x || 2.x", ">=1.2.0- <1.3.0-||>=2.0.0- <3.0.0-"]
	, ["1.2.x || 2.x", ">=1.2.0- <1.3.0-||>=2.0.0- <3.0.0-"]
	, ["x", ""]
	, ["2.*.*", null]
	, ["1.2.*", null]
	, ["1.2.* || 2.*", null]
	, ["1.2.* || 2.*", null]
	, ["*", ""]
	, ["2", ">=2.0.0- <3.0.0-"]
	, ["2.3", ">=2.3.0- <2.4.0-"]
	, ["~2.4", ">=2.4.0- <2.5.0-"]
	, ["~2.4", ">=2.4.0- <2.5.0-"]
	, ["~>3.2.1", ">=3.2.1- <3.3.0-"]
	, ["~1", ">=1.0.0- <2.0.0-"]
	, ["~>1", ">=1.0.0- <2.0.0-"]
	, ["~> 1", ">=1.0.0- <2.0.0-"]
	, ["~1.0", ">=1.0.0- <1.1.0-"]
	, ["~ 1.0", ">=1.0.0- <1.1.0-"]
	, ["<1", "<1.0.0-"]
	, ["< 1", "<1.0.0-"]
	, [">=1", ">=1.0.0-"]
	, [">= 1", ">=1.0.0-"]
	, ["<1.2", "<1.2.0-"]
	, ["< 1.2", "<1.2.0-"]
	, ["1", ">=1.0.0- <2.0.0-"]];

	static var comparators:Array<Dynamic> =
	[ ["1.0.0 - 2.0.0", [[">=1.0.0", "<=2.0.0"]] ]
	, ["1.0.0", [["1.0.0"]] ]
	, [">=*", [[">=0.0.0-"]] ]
	, ["", [[""]]]
	, ["*", [[""]] ]
	, ["*", [[""]] ]
	, [">=1.0.0", [[">=1.0.0"]] ]
	, [">=1.0.0", [[">=1.0.0"]] ]
	, [">=1.0.0", [[">=1.0.0"]] ]
	, [">1.0.0", [[">1.0.0"]] ]
	, [">1.0.0", [[">1.0.0"]] ]
	, ["<=2.0.0", [["<=2.0.0"]] ]
	, ["1", [[">=1.0.0-", "<2.0.0-"]] ]
	, ["<=2.0.0", [["<=2.0.0"]] ]
	, ["<=2.0.0", [["<=2.0.0"]] ]
	, ["<2.0.0", [["<2.0.0"]] ]
	, ["<2.0.0", [["<2.0.0"]] ]
	, [">= 1.0.0", [[">=1.0.0"]] ]
	, [">=  1.0.0", [[">=1.0.0"]] ]
	, [">=   1.0.0", [[">=1.0.0"]] ]
	, ["> 1.0.0", [[">1.0.0"]] ]
	, [">  1.0.0", [[">1.0.0"]] ]
	, ["<=   2.0.0", [["<=2.0.0"]] ]
	, ["<= 2.0.0", [["<=2.0.0"]] ]
	, ["<=  2.0.0", [["<=2.0.0"]] ]
	, ["<    2.0.0", [["<2.0.0"]] ]
	, ["<\t2.0.0", [["<2.0.0"]] ]
	, [">=0.1.97", [[">=0.1.97"]] ]
	, [">=0.1.97", [[">=0.1.97"]] ]
	, ["0.1.20 || 1.2.4", [["0.1.20"], ["1.2.4"]] ]
	, [">=0.2.3 || <0.0.1", [[">=0.2.3"], ["<0.0.1"]] ]
	, [">=0.2.3 || <0.0.1", [[">=0.2.3"], ["<0.0.1"]] ]
	, [">=0.2.3 || <0.0.1", [[">=0.2.3"], ["<0.0.1"]] ]
	, ["||", [[""], [""]] ]
	, ["2.x.x", [[">=2.0.0-", "<3.0.0-"]] ]
	, ["1.2.x", [[">=1.2.0-", "<1.3.0-"]] ]
	, ["1.2.x || 2.x", [[">=1.2.0-", "<1.3.0-"], [">=2.0.0-", "<3.0.0-"]] ]
	, ["1.2.x || 2.x", [[">=1.2.0-", "<1.3.0-"], [">=2.0.0-", "<3.0.0-"]] ]
	, ["x", [[""]] ]
	, ["2.*.*", [[">=2.0.0-", "<3.0.0-"]] ]
	, ["1.2.*", [[">=1.2.0-", "<1.3.0-"]] ]
	, ["1.2.* || 2.*", [[">=1.2.0-", "<1.3.0-"], [">=2.0.0-", "<3.0.0-"]] ]
	, ["1.2.* || 2.*", [[">=1.2.0-", "<1.3.0-"], [">=2.0.0-", "<3.0.0-"]] ]
	, ["*", [[""]] ]
	, ["2", [[">=2.0.0-", "<3.0.0-"]] ]
	, ["2.3", [[">=2.3.0-", "<2.4.0-"]] ]
	, ["~2.4", [[">=2.4.0-", "<2.5.0-"]] ]
	, ["~2.4", [[">=2.4.0-", "<2.5.0-"]] ]
	, ["~>3.2.1", [[">=3.2.1-", "<3.3.0-"]] ]
	, ["~1", [[">=1.0.0-", "<2.0.0-"]] ]
	, ["~>1", [[">=1.0.0-", "<2.0.0-"]] ]
	, ["~> 1", [[">=1.0.0-", "<2.0.0-"]] ]
	, ["~1.0", [[">=1.0.0-", "<1.1.0-"]] ]
	, ["~ 1.0", [[">=1.0.0-", "<1.1.0-"]] ]
	, ["<1", [["<1.0.0-"]] ]
	, ["< 1", [["<1.0.0-"]] ]
	, [">=1", [[">=1.0.0-"]] ]
	, [">= 1", [[">=1.0.0-"]] ]
	, ["<1.2", [["<1.2.0-"]] ]
	, ["< 1.2", [["<1.2.0-"]] ]
	, ["1", [[">=1.0.0-", "<2.0.0-"]]]];

	//-------------------------------------------------------------------------- helpers

	function ok(expr:Bool, msg:Dynamic)
	{
		if (!expr)
		{
			Assert.fail(Std.string(msg));
		}
	}

	function equivalent(array1:Dynamic, array2:Dynamic)
	{
		if (array1.length != array2.length) return false;

		for (i in 0...array1.length)
		{
			if (Std.is(array1[i], Array))
			{
				if (!equivalent(array1[i], array2[i])) return false;
			}
			else
			{
				if (array1[i] != array2[i]) return false;
			}
		}

		return true;
	}

	//-------------------------------------------------------------------------- tests

	@Test
	public function satisfies_equalities()
	{
		for (test in equalities)
		{
			var v0:String = test[0];
			var v1:String = test[1];

			ok(v0.gt(v1), "gt('" + v0 + "', '" + v1 + "')");
			ok(v1.lt(v0), "lt('" + v1 + "', '" + v0 + "')");
			ok(!v1.gt(v0), "!gt('" + v1 + "', '" + v0 + "')");
			ok(!v0.lt(v1), "!lt('" + v0 + "', '" + v1 + "')");
			ok(v0.eq(v0), "eq('" + v0 + "', '" + v0 + "')");
			ok(v1.eq(v1), "eq('" + v1 + "', '" + v1 + "')");
			ok(v0.neq(v1), "neq('" + v0 + "', '" + v1 + "')");

			ok(v0.cmp("==", v0), "cmp('" + v0 + "', '==', '" + v0 + "')");
			ok(v0.cmp(">=", v1), "cmp('" + v0 + "', '>=', '" + v1 + "')");
			ok(v1.cmp("<=", v0), "cmp('" + v1 + "', '<=', '" + v0 + "')");
			ok(v0.cmp("!=", v1), "cmp('" + v0 + "', '!=', '" + v1 + "')");
		}
	}

	@Test
	public function satisfies_inequalities()
	{
		for (test in nequalities)
		{
			var v0:String = test[0];
			var v1:String = test[1];

			ok(v0.eq(v1), "eq('"+v0+"', '"+v1+"')");
			ok(!v0.neq(v1), "!neq('"+v0+"', '"+v1+"')");
			ok(v0.cmp("==", v1), "cmp("+v0+"=="+v1+")");
			ok(!v0.cmp("!=", v1), "!cmp("+v0+"!="+v1+")");
			ok(!v0.cmp("===", v1), "!cmp("+v0+"==="+v1+")");
			ok(v0.cmp("!==", v1), "cmp("+v0+"!=="+v1+")");
			ok(!v0.gt(v1), "!gt('"+v0+"', '"+v1+"')");
			ok(v0.gte(v1), "gte('"+v0+"', '"+v1+"')");
			ok(!v0.lt(v1), "!lt('"+v0+"', '"+v1+"')");
			ok(v0.lte(v1), "lte('"+v0+"', '"+v1+"')");
		}
	}

	@Test
	public function satisfies_ranges()
	{
		for (test in ranges)
		{
			ok(SemVer.satisfies(test[1], test[0]), test[0]+" satisfied by "+test[1]);
		}
	}

	@Test
	public function satisfies_negated_ranges()
	{
		for (test in nranges)
		{
			ok(!SemVer.satisfies(test[1], test[0]), test[0]+" not satisfied by "+test[1]);
		}
	}

	@Test
	public function increments_version()
	{
		for (test in increments)
		{
			ok(SemVer.inc(test[0], test[1]) == test[2], "inc("+test[0]+", "+test[1]+") == "+test[2]);
		}
	}

	@Test
	public function replaces_stars()
	{
		for (test in stars)
		{
			ok(SemVer.replaceStars(test[0]) == test[1], "replaceStars("+test[0]+") == "+test[1]);
		}
	}

	@Test
	public function validates_ranges()
	{
		for (test in validRanges)
		{
			ok(SemVer.validRange(test[0]) == test[1], "validRange("+test[0]+") == "+test[1]);
		}
	}

	@Test
	public function converts_comparators()
	{
		for (test in comparators)
		{
			ok(equivalent(SemVer.toComparators(test[0]), test[1]), "toComparators("+test[0]+") == "+test[1]);
		}
	}
}
